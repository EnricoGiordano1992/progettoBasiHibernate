/**        DBMS.java        */
package dbms;

import bean.*;

import org.hibernate.*;

import java.sql.*;
import java.util.ArrayList;
import java.util.Vector;

public class DBMS {


	//query per la homepage
	String queryPrimario =
			"select * " +
					"from medico as m " +
					"where m.primario = 'si';";

	//query per la pazientepage
	String queryLoginPaziente =
			"select * from paziente as p where p.codsan = (:codsan) and p.psw = (:psw)";

	String queryPaziente = 
			"select p.* " +
			"from paziente as p " +
			"where p.codsan = (:codsan) ;";
	
	String queryCartellaDelPaziente =
			"select c.* " +
			"from cartella_clinica as c, paziente as p " +
			"where c.codsan = (:codsan) " +
			"and c.codsan = p.codsan;";
	
	
	String queryRischiPaziente = 
			"select r.* " +
			"from paziente as p, rischi_paziente as r " +
			"where p.codsan = (:codsan) " +
			"and p.codsan = r.id_paziente; ";
	
	
	String queryMediciDelPaziente =
			"select m.* " +
			"from paziente as p, medico as m, diagnosi as d " +
			"where p.codsan = (:codsan) " +
			"and p.codsan = d.id_paziente " +
			"and m.id = d.id_medico ;";

	//query per la cartellapage
	String queryCartella =
			"select c.* " +
					"from cartella_clinica as c, paziente as p " +
					"where c.id = (:id) ;";
	
	String queryTerapieDellaCartella =
			"select t.* " +
					"from cartella_clinica as c, terapie as t " +
					"where c.id = (:id) " +
					"and c.id = t.id_cartella ; ";

	//nome e cognome del medico li ho facendo accesso a d.getMedico().ecc...
	String queryDiagnosiDellaCartella =
			"select d.* " +
			"from cartella_clinica as c, diagnosi as d, paziente as p, medico as m " +
			"where c.id = (:id) " +
			"and p.codsan = d.id_paziente " +
			"and p.codsan = c.codsan; ";

	//query per la personalepage
	//so gia tutto del primario 
	
	String querySpecializzazioni =
			" select * " +
			"from spec_del_medico as s " +
			"where s.id_medico = (:id_medico) ;";
	
	String queryPersonale =
			"select m.* " +
					"from medico as m;";

	//query per la patologiepage
	String queryPatologie =
			"select d.* " +
					"from diagnosi as d; ";
	
	
	//per contare le patologie per ogni paziente fai paziente.size()
	String queryCountPatologie =
			"select count(*) " +
					"from diagnosi as d, paziente as p " +
					"where d.id_paziente = (:id_paziente) ;";
	
	


	//query per la diagnosipage
	String queryMedicoLogin =
			"select m.* from medico as m where m.id = (:id) and m.psw = (:psw);";

	String queryMedicoLoginOk =
			"select m.* from medico as m where m.id = (:id);";

	

	
	/***********************************************************/
	/***********************************************************/
	/***********************************************************/
	 /* 
	 *  METODI GET
	 * 
	/***********************************************************/
	/***********************************************************/
	/***********************************************************/

	/***********************************************************/
	/***********************************************************/
	//query per la homepage
	
	public Medico getPrimario() {
		
		Medico bean;
		
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		bean = (Medico) session.createSQLQuery(queryPrimario).addEntity(Medico.class).uniqueResult();
		
		tx.commit();
		session.close();
		
		return bean;
	}



	/***********************************************************/
	/***********************************************************/
	//query per la pazientepage
	
	public Paziente getPaziente(String codsan){
		
		Paziente result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryPaziente).addEntity(Paziente.class);
		query.setString("codsan", codsan);


		result = (Paziente) query.uniqueResult();

		tx.commit();
		session.close();

		return result;
	}


	
	public String PazienteLogin(String codsan, String password){

		Paziente result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryLoginPaziente).addEntity(Paziente.class);
		query.setString("codsan", codsan);
		query.setString("psw", password);


		result = (Paziente) query.uniqueResult();

		tx.commit();
		session.close();

		return result.getCodsan();
	}

	
	
	public ArrayList<CartellaClinica> getCartelleDelPaziente(String codsan){

		ArrayList<CartellaClinica> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryCartellaDelPaziente).addEntity(CartellaClinica.class);
		query.setString("codsan", codsan);

		result = ( ArrayList<CartellaClinica> ) query.list();
		
		tx.commit();
		session.close();

		return result;	
		
	}

	
	
	public ArrayList<RischiPaziente> getRischiDelPaziente(String codsan){

		ArrayList<RischiPaziente> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryRischiPaziente).addEntity(RischiPaziente.class);
		query.setString("codsan", codsan);

		result = ( ArrayList<RischiPaziente> ) query.list();
		
		tx.commit();
		session.close();

		return result;	


	}
	
	
	
	public ArrayList<Medico> getMediciDelPaziente(String codsan){
		
		ArrayList<Medico> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryMediciDelPaziente).addEntity(Medico.class);
		query.setString("codsan", codsan);

		result = ( ArrayList<Medico> ) query.list();
		
		tx.commit();
		session.close();

		return result;	

	}

	/***********************************************************/
	/***********************************************************/
	//query per la cartellaPage
	
	public CartellaClinica getCartella(String id){

		CartellaClinica result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryLoginPaziente).addEntity(CartellaClinica.class);
		query.setString("id", id);


		result = (CartellaClinica) query.uniqueResult();

		tx.commit();
		session.close();

		return result;

	}


	
	
	public ArrayList<Terapie> getTerapieCartella(String id){

		ArrayList<Terapie> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryTerapieDellaCartella).addEntity(Terapie.class);
		query.setString("id", id);

		result = ( ArrayList<Terapie> ) query.list();
		
		tx.commit();
		session.close();

		return result;	

	}


	
	
	public ArrayList<Diagnosi> getDiagnosiCartella(String id){

		ArrayList<Diagnosi> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryDiagnosiDellaCartella).addEntity(Diagnosi.class);
		query.setString("id", id);

		result = ( ArrayList<Diagnosi> ) query.list();
		
		tx.commit();
		session.close();

		return result;	

	}


	/***********************************************************/
	/***********************************************************/
	//query per la personale page
	//(1)
	
	public ArrayList<Medico> getPersonaleMedico() {

		ArrayList<Medico> res;
		
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		res = ( ArrayList<Medico> ) session.createSQLQuery(queryPersonale).addEntity(Medico.class).list();
		tx.commit();
		session.close();

		return res;

	}
	
	
	
	
	public ArrayList<SpecDelMedico> getSpecializzazioni(String id){

		ArrayList<SpecDelMedico> result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(querySpecializzazioni).addEntity(SpecDelMedico.class);
		query.setString("id_medico", id);

		result = ( ArrayList<SpecDelMedico> ) query.list();
		
		tx.commit();
		session.close();

		return result;	

	}
	
	
	/***********************************************************/
	/***********************************************************/
	//query per la patologiepage
	
	public ArrayList<Diagnosi> getPatologie() {

		ArrayList<Diagnosi> res;
		
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		res = ( ArrayList<Diagnosi> ) session.createSQLQuery(queryPatologie).addEntity(Diagnosi.class).list();
		tx.commit();
		session.close();

		return res;

	}
	
	
	
	public int getCountPatologie(String id_paziente) {
	
		int result = 0;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryCountPatologie);
		query.setString("id_paziente", id_paziente);

		Long count = (Long)query.uniqueResult();
		
		result = count.intValue();
		
		tx.commit();
		session.close();

		return result;	

		
	}

	
	/***********************************************************/
	/***********************************************************/
	//query per la diagnosipage
	
	public Medico MedicoLogin(String id, String pw){

		Medico result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryMedicoLogin).addEntity(Medico.class);
		query.setString("id", id);
		query.setString("psw", pw);


		result = (Medico) query.uniqueResult();

		tx.commit();
		session.close();

		return result;

	}
	
	
	
	public Medico getMedico(String id){

		Medico result = null;

		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction(); 

		Query query = session.createSQLQuery(queryMedicoLoginOk).addEntity(Medico.class);
		query.setString("id", id);


		result = (Medico) query.uniqueResult();

		tx.commit();
		session.close();

		return result;

	}
	
	
}